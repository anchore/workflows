# remove-awaiting-response-label.yaml
name: "Manage Awaiting Response"
on:
  workflow_call:
    inputs:
      users:
        # TODO: replace me with an org-based or team-based check
        default: '["wagoodman", "tgerla", "kzantow", "willmurphyscode", "spiffcs", "westonsteimel", "zhill", "nurmi", "popey"]'
        description: "JSON list as string of users to ignore"
        type: string

      project_id:
        # this is the anchore OSS project board, from:
        #   gh project list --owner anchore
        default: PVT_kwDOAPdSZ84ABa9X
        type: string
        description: "The github project ID to affect"

      field_id:
        # this is the "Triage" field id, from:
        #   gh project field-list --owner anchore 22 --format json -q '.fields[] | select(.name == "Triage").id'
        default: PVTSSF_lADOAPdSZ84ABa9XzggXBuc
        type: string
        description: "The field ID to clear"

    secrets:
      token:
        description: "The classic GitHub token (with project access) to use for authentication"
        required: true

jobs:
  remove-awaiting-response:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'issue_comment' && !github.event.issue.pull_request }}
    steps:
      - name: Show event info
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository: ${{ github.event.repository.name }}"
          echo "Repository Owner: ${{ github.event.repository.owner.login }}"
          echo "Number: ${{ github.event.issue.number }}"
          echo "Issue Author: ${{ github.event.issue.user.login }}"

      - name: Remove awaiting response field value
        if: |
          !contains(fromJson( inputs.users ), github.event.issue.user.login) && github.event.issue.user.login != ''
        run: |
          gh api graphql -f query='
            query($repo: String!, $owner: String!, $issueNumber: Int!) {
              repository(name: $repo, owner: $owner) {
                issue(number: $issueNumber) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        title
                      }
                    }
                  }
                }
              }
            }
          ' -f repo="${{ github.event.repository.name }}" -f owner="${{ github.event.repository.owner.login }}" -F issueNumber=${{ github.event.issue.number }} | jq '.data.repository.issue.projectItems.nodes[] | select(.project.title == "OSS").id' > item-id.txt

          # if item was not found, then exit early
          if [ ! -s item-id.txt ]; then
            echo "No project item found for issue"
            exit 1
          fi

          # clear the ID
          export item_id=$(cat item-id.txt)
          echo "Clearing triage field for project item ${item_id}"
          gh project item-edit --id ${item_id} --project-id ${{ inputs.project_id }} --field-id ${{ inputs.field_id }} --clear

        env:
          GH_TOKEN: ${{ secrets.token }}
